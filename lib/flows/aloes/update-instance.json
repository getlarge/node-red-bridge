[
    {
        "id": "9257ae9d.5557e",
        "type": "function",
        "z": "c0de6673.b307c",
        "name": "findInstance",
        "func": "try {\n    console.log(\"findInstance : \",  msg.topic);\n    if (msg.topic) {\n        // pattern : audio-player-test/POST/sensor/3339/3/5523\n        const userId = env.get(\"user_id\");\n        const t = msg.topic.split(\"/\");\n        const storeType = env.get(\"store_type\") || \"default\";\n        const deviceName = env.get(\"device_name\") || t[0];\n        if (!userId || !deviceName) throw new Error(\"Missing env vars\"); \n        const method = t[0];\n        const collection = t[1].toLowerCase();\n        const objectId = t[2];\n        const nativeSensorId = t[3];\n        const resourceId = t[4];\n        let storeKey;\n        if (collection === \"sensor\" && objectId && nativeSensorId) {\n            storeKey = `sensor-${deviceName}-${objectId}-${nativeSensorId}`;\n        } else if (collection === \"device\") {\n            storeKey = `device-${deviceName}`;\n        }\n        //  console.log(\"findInstance storeKey : \", storeKey);\n        if(!storeKey) throw new Error(\"Missing params\");\n        let instance;\n        global.get(storeKey, storeType, (err, res) => {\n            if(err) throw err;\n            instance = res;\n            return instance;\n        });  \n        if (!instance) throw new Error('No instance found');\n        //  console.log(\"foundInstance: \", objectId, nativeSensorId, resourceId);\n        //  console.log(\"foundInstance payload\", msg.payload);\n        //  const collectionName = `${collection.charAt(0).toUpperCase()}${collection.slice(1)}`;\n        //  msg.topic = `${userId}/${collectionName}/${method}/${instance.id}`;\n        msg.topic = `${userId}/IoTAgent/${method}/${instance.id}`;\n        msg[collection] = instance;\n        msg.value = msg.payload;\n        msg.resource = resourceId;\n        msg.attribute = objectId;\n        return msg;\n    }\n    throw new Error(\"Missing params\");\n} catch(error){\n    //  console.log('error', error);\n    return error;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "59b87ec0.4ecfa8"
            ]
        ]
    },
    {
        "id": "59b87ec0.4ecfa8",
        "type": "function",
        "z": "c0de6673.b307c",
        "name": "updateInstance",
        "func": "try {\n    const storeType = env.get(\"store_type\") || \"default\";\n    let updater; \n    global.get(\"aloesHandlers\", storeType, (err,res) => {\n        if (err) throw err;\n        updater = res.updateAloesSensors;\n    });\n    if (!updater) throw new Error(\"Can't import Aloes Handlers\");\n    //  console.log(\"aloesHandlers\", updater);\n    //  console.log(\"resource : \", msg.resource);\n    if (msg.sensor && msg.resource) {\n        console.log(\"updateInstance value type: \", typeof msg.payload);\n        const sensor = updater(msg.sensor, Number(msg.resource), msg.payload);\n        if (!sensor || sensor === null ) throw new Error(\"Error while updating sensor\");\n        console.log(\"updateInstance : \", sensor.name, sensor.resource);\n        console.log(\"updateInstance value : \", sensor.resources[sensor.resource.toString()]);\n        delete msg.sensor;\n        msg.payload = sensor;\n        return msg;\n    }\n    return null;\n} catch(error){\n    return error;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 220,
        "wires": [
            [
                "8385ed0c.94875"
            ]
        ]
    },
    {
        "id": "8385ed0c.94875",
        "type": "function",
        "z": "c0de6673.b307c",
        "name": "",
        "func": "if (env.get(\"debug\")) {\n    return [msg, msg];\n}\nreturn [msg,null];",
        "outputs": 2,
        "noerr": 0,
        "x": 660,
        "y": 220,
        "wires": [
            [],
            [
                "b8e8199.4aadee8"
            ]
        ]
    },
    {
        "id": "b8e8199.4aadee8",
        "type": "debug",
        "z": "c0de6673.b307c",
        "name": "${device_name}",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 750,
        "y": 300,
        "wires": []
    }
]